Summary:
Can we reliably detect an incomplete first commit vs index corruption?
Description:
Normally, if something bad happens (OS, JVM, hardware crashes) while
IndexWriter is committing, we will just fallback to the prior commit
and no intervention necessary from the app.
But if that commit is the first commit, then on restart IndexWriter
will now throw CorruptIndexException, as of LUCENE-4738.
Prior to LUCENE-4738, in LUCENE-2812, we used to try to detect the
corrupt first commit, but that logic was dangerous and could result in
falsely believing no index is present when one is, e.g. when transient
IOExceptions are thrown due to file descriptor exhaustion.
But now two users have hit this change ... see "CorruptIndexException
when opening Index during first commit" and "Calling
IndexWriter.commit() immediately after creating the writer", both on
java-user.
It would be nice to get back to not marking an incomplete first commit
as corruption ... but we have to proceed carefully.
Status:
OPEN
Priority:
Major
Resolution:
Unresolved
Affects_version:
None
Fix_version:
4.9, 6.0
Component:
core/index
Label:
None
Environment:

Attachment number:
0
Assignee:
Unassigned
Reporter:
Michael McCandless
Create date:
30/May/13 15:19
Update date:
09/May/16 18:33
Resolved date:

