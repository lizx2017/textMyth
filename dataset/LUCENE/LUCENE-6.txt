Summary:
new IndexReader.terms(myterm) skips over first term
Description:
if I do
IndexReader r = IndexReader.open("index");
Term t = new Term("contents","heidegger");
TermEnum terms = r.terms(t);
out.println("zero-term: "terms.term().text()"<br>");
int cnt = 0;
while (terms.next()) {
out.println("term: "terms.term().text()"<br>");
if (cnt++>5) break;
}
then the first term I see in the main loop after terms.next() is
not "heidegger", even though this is in my index. If I query the enumerator
BEFORE calling next(), the term is there.
However, the comments in TermEnum.term() says that this method is only valid
after the first next() and all other enumerators work that way too.
The terms(Term) should give back the actual term first, just as it says it
does, right?
The enumerator skips over the first term if I search for a non-existing term
like "heidegge" as well.
This means that a PrefixQuery will not work as expected since it uses this
enumerator, right?
Status:
CLOSED
Priority:
Major
Resolution:
Fixed
Affects_version:
1.2
Fix_version:
None
Component:
core/index
Label:
None
Environment:

Attachment number:
0
Assignee:
Lucene Developers
Reporter:
Anne Veling
Create date:
01/Nov/01 16:08
Update date:
02/Jun/11 22:01
Resolved date:
27/May/06 01:35
