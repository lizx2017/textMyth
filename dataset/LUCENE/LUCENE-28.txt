Summary:
query parser does not close TokenStreams returned by Analyzer
Description:
The TokenStream class has a close() method which must be called afterthe token stream has been exhausted (i.e. next() returns null) torelease underlying resources held by the stream, such as a Reader.This method invocation is essential in cases where TokenStreams areexpensive to set up and the Analyzer decides to cache them, becausethe call to close is how the token stream knows to clean up.The QueryParser violates this contract by creating and using TokenStreamsbut not closing them. The getFieldQuery method is an example of this.I suggest rewriting this portion:while (true) { try
{ t = source.next(); }
catch (IOException e)
{ t = null; }
if (t == null) break; v.addElement(t.termText()); }as follows:try { Token t = null; while ((t = source.next()) != null) { v.addElement(t.termText()); }} catch (IOException ioe)
{ // this should be raised, not swallowed as it currently is // the TokenStream writer may have raised an IOException that needs // to be handled}
finally
{ source.close(); // must do this!}
There may be other instances of this problem which also need to have the call to TokenStream.close() added.
Status:
CLOSED
Priority:
Blocker
Resolution:
Fixed
Affects_version:
1.2
Fix_version:
None
Component:
core/queryparser
Label:
None
Environment:
linux
Attachment number:
0
Assignee:
Lucene Developers
Reporter:
Eric Friedman
Create date:
06/Apr/02 09:01
Update date:
02/Jun/11 22:01
Resolved date:
27/May/06 01:35
