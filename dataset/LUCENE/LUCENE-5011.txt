Summary:
MemoryIndex and FVH don't play along with multi-value fields
Description:
When multi-value fields are indexed to a MemoryIndex, positions are computed correctly on search but the start and end offsets and the values array index aren't correct.
Comparing the same execution path for IndexReader on a Directory impl and MemoryIndex (same document, same query, same analyzer, different Index impl), the difference first shows in FieldTermStack.java line 125:
termList.add( new TermInfo( term, dpEnum.startOffset(), dpEnum.endOffset(), pos, weight ) );
dpEnum.startOffset() and dpEnum.endOffset don't match between implementations.
This looks like a bug in MemoryIndex, which doesn't seem to handle tokenized multi-value fields all too well when positions and offsets are required.
I should also mention we are using an Analyzer which outputs several tokens at a position (a la SynonymFilter), but I don't believe this is related.
Status:
OPEN
Priority:
Major
Resolution:
Unresolved
Affects_version:
4.3
Fix_version:
None
Component:
None
Label:
None
Environment:

Attachment number:
0
Assignee:
Unassigned
Reporter:
Itamar Syn-Hershko
Create date:
21/May/13 11:25
Update date:
31/Jul/14 02:49
Resolved date:

