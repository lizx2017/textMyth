Summary:
DefaultSecurityManager.setSessionManager can get out of sync with DefaultSecurityManager.setSessionMode
Description:
So, I've run into a bit of a pickle with DefaultWebSecurityManager and
native vs http sessions.
The DefaultWebSecurityManager exposes two methods, ostensibly for the
purposes of determining how sessions are managed:
setSessionManager(SessionManager)
and
setSessionMode(String)
However, it would appear that if I call:
setSessionManager(new MyCustomSessionManager())
and then
setSessionMode("native")
the SessionManager is overridden.
This is a bit of a gotcha, but can be easily avoided by not calling
setSessionMode. (calling them in the reverse order seems contrary to
the nature of setters) The problem with not calling setSessionMode is
that it appears to actually matter - if I leave it to it's default
(http), but set a DefaultWebSessionManager, then things break horribly
(apparently due to the use of isHttpSessionMode by AbstractShiroFilter
for redirect rewriting). Sessions get forgotten, etc. This also seems
contrary to the nature of setters.
Status:
CLOSED
Priority:
Major
Resolution:
Fixed
Affects_version:
1.2.0
Fix_version:
1.2.0
Component:
Web
Label:
None
Environment:

Attachment number:
0
Assignee:
Les Hazlewood
Reporter:
Jared Bunting
Create date:
20/Jul/11 03:27
Update date:
24/Jan/12 01:11
Resolved date:
16/Sep/11 14:54
