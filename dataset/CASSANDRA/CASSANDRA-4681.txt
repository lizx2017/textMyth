Summary:
SlabAllocator spends a lot of time in Thread.yield
Description:
When profiling high volume inserts into Cassandra running on a host with fast SSD and CPU, Thread.yield() invoked by SlabAllocator appeared as the top item in CPU samples. The fix is to return a regular byte buffer if current slab is being initialized by another thread. So instead of:
if (oldOffset == UNINITIALIZED)
{ // The region doesn't have its data allocated yet. // Since we found this in currentRegion, we know that whoever // CAS-ed it there is allocating it right now. So spin-loop // shouldn't spin long! Thread.yield(); continue; }
do:
if (oldOffset == UNINITIALIZED)
return ByteBuffer.allocate(size);
I achieved 4x speed up in my (admittedly specialized) benchmark by using an optimized version of SlabAllocator attached. Since this code is in the critical path, even doing excessive atomic instructions or allocating unneeded extra ByteBuffer instances has a measurable effect on performance
Status:
RESOLVED
Priority:
Low
Resolution:
Not A Problem
Affects_version:

Fix_version:
None
Component:
None
Label:
performance qa-resol
Environment:
linux
Attachment number:
0
Assignee:
Jonathan Ellis
Reporter:
Oleg Kibirev
Create date:
18/Sep/12 20:50
Update date:
16/Apr/19 09:32
Resolved date:
30/Sep/13 21:36
