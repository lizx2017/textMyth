Summary:
Unsustainable Thread Accumulation in ParallelCompactionIterable.Reducer ThreadPoolExecutor
Description:
With multithreaded compaction enabled, it looks like Reducer creates a new thread pool for every compaction. These pools seem to just sit around - i.e. "executor.shutdown()" never gets called and the Threads live forever waiting for tasks that will never come. For instance...
Name: CompactionReducer:1
State: TIMED_WAITING on java.util.concurrent.SynchronousQueue$TransferStack@72938aea
Total blocked: 0 Total waited: 1
Stack trace:
sun.misc.Unsafe.park(Native Method)
java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:226)
java.util.concurrent.SynchronousQueue$TransferStack.awaitFulfill(SynchronousQueue.java:460)
java.util.concurrent.SynchronousQueue$TransferStack.transfer(SynchronousQueue.java:359)
java.util.concurrent.SynchronousQueue.poll(SynchronousQueue.java:942)
java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1043)
java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1103)
java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
java.lang.Thread.run(Thread.java:722)
Status:
RESOLVED
Priority:
Low
Resolution:
Fixed
Affects_version:

Fix_version:
1.0.7
Component:
None
Label:
compaction memory_le
Environment:
centos, java 1.7
Attachment number:
0
Assignee:
Jonathan Ellis
Reporter:
Caleb Rackliffe
Create date:
08/Jan/12 23:46
Update date:
16/Apr/19 09:32
Resolved date:
10/Jan/12 08:29
