Summary:
HClient for multiple tables
Description:
I have an app that needs to access multiple HBase tables concurrently. The current HClient can only have one table open at a time even though it caches region servers of multiple tables as they are looked up.
This means that my application layer must open multiple HClients, one per table, perhaps caching those HClients in a pool to reuse them (and their cached table data) as appropriate.
or
Shall I write an HClient patch that makes the HClient multi-table thread-safe?
Jim's suggestion is to implement an HClient singleton (call it HClientManager?) that does the actual caching/resync of root/meta regions. Individual HClients will still be one table, one update row at a time but will rely on the singleton for the cached table info. We want HClients to be created and disposed as fast as possible with a minimum of meta lookups.
Jim, what about non-root/meta regions, shouldn't they be cached and refreshed via the singleton also? It may still be possible that a region split/resync will occur during on HClient session so does the HClientManager need to be able to notify the corresponding HClients in that event?
Status:
CLOSED
Priority:
Major
Resolution:
Fixed
Affects_version:
None
Fix_version:
None
Component:
None
Label:
None
Environment:

Attachment number:
0
Assignee:
Unassigned
Reporter:
James Kennedy
Create date:
25/Jun/07 21:27
Update date:
04/Feb/08 18:41
Resolved date:
03/Aug/07 00:03
