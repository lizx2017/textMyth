Summary:
CT.verifyRegionLocation isn't doing a very good check, can delay cluster recovery
Description:
After some extensive debugging in the thread A sudden msg of "java.io.IOException: Server not running, aborting", we figured that the region servers weren't able to talk to the new .META. location because the old one was still alive but on it's way down after a OOME.
It translates into exceptions like "Server not running" coming from trying to edit .META. and digging in the code I see that CT.waitForMetaServerConnectionDefault -> waitForMeta -> getMetaServerConnection(true) calls verifyRegionLocation since we force the refresh. In this method we check if the RS is good by calling getRegionInfo which does not check if the region server is trying to close.
What this means is that a cluster can't recover a .META.-serving RS failure until it has fully shutdown since every time a RS tries to open a region (like right after the log splitting) or split it fails editing .META.
Status:
CLOSED
Priority:
Blocker
Resolution:
Fixed
Affects_version:
0.90.3
Fix_version:
0.90.4
Component:
None
Label:
None
Environment:

Attachment number:
0
Assignee:
Jean-Daniel Cryans
Reporter:
Jean-Daniel Cryans
Create date:
13/Jun/11 18:36
Update date:
20/Nov/15 11:53
Resolved date:
29/Jun/11 22:29
