Summary:
HTable.close() should shut down executor pool
Description:
Right now, it looks like HTable.close() is primarily concerned with flushing commits. I understand the intended semantics of close to be that clients should not attempt to call any other methods on that HTable instance after close is called. If that's true, then close() might leave around some relatively heavy resources after close() is called that can serve no further purpose. In particular, the executor this.pool may have a number of threads outstanding for some period of time (a minute with the default keepAliveTime of 60). With the default number of threads == the number of regionservers and with each thread having a 1mb stack by default on 64-bit jvms, this can be a considerable amount of memory left around (in addition to any other resources consumed by each thread). Is there any reason for close() not to also call this.pool.shutdown() after it calls flushCommits()?
Status:
RESOLVED
Priority:
Major
Resolution:
Duplicate
Affects_version:
0.90.3
Fix_version:
None
Component:
Client
Label:
None
Environment:

Attachment number:
0
Assignee:
Unassigned
Reporter:
Josh Rosenblum
Create date:
23/Sep/11 18:21
Update date:
26/Sep/11 17:27
Resolved date:
26/Sep/11 17:27
