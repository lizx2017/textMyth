Summary:
Unnecessary creation of finalizers in HTablePool
Description:
From a mailing list question:
While generating some load against a library that makes extensive use of HTablePool in 0.92, I noticed that the largest heap consumer was java.lang.ref.Finalizer. Digging in, I discovered that HTablePool's internal PooledHTable extends HTable, which instantiates a ThreadPoolExecutor and supporting objects every time a pooled HTable is retrieved. Since ThreadPoolExecutor has a finalizer, it and its dependencies can't get garbage collected until the finalizer runs. The result is by using HTablePool, we're creating a ton of objects to be finalized that are stuck on the heap longer than they should be, creating our largest source of pressure on the garbage collector. It looks like this will also be a problem in 0.94 and trunk.
The easy fix is just to have PooledHTable implement HTableInterface (rather than subclass HTable), but this does break a unit test that explicitly checks that PooledHTable implements HTable â€“ I can only assume this test is there for some historical passivity reason.
Status:
RESOLVED
Priority:
Major
Resolution:
Invalid
Affects_version:
0.92.0, (2)
Fix_version:
0.92.3
Component:
Client
Label:
None
Environment:

Attachment number:
0
Assignee:
Unassigned
Reporter:
Ryan Brush
Create date:
03/Jul/12 21:33
Update date:
30/Jul/17 13:15
Resolved date:
30/Jul/17 13:15
