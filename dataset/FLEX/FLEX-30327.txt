Summary:
QTP does not automatically see a flex component not in the contentGroup of a skin.
Description:
Steps to reproduce:
1. Compile the project attached
2. QTP does not see the first(top) button which is not in the contentGroup of the skin
3. QTP should see both buttons.
Here's another description of the bug:
The following Skin works with QTP without having to write a custom delegate:
(as you can see I put the button inside the contentGroup container)
------------------------------
<?xml version="1.0" encoding="utf-8"?>
<s:SparkSkin xmlns:fx="http://ns.adobe.com/mxml/2009"
xmlns:s="library://ns.adobe.com/flex/spark"
xmlns:mx="library://ns.adobe.com/flex/mx"
>
<fx:Metadata>
<![CDATA[
[HostComponent("components.MosaicTabComponent")]
]]
>
</fx:Metadata>
<s:states>
<s:State name="normal" />
<s:State name="disabled" />
</s:states>
<s:Group id="contentGroup" right="8" top="0" height="18" excludeFrom="hiddenControls">
<s:Button id="addButton"
label="AddButton"
width="100" height="30"
click="hostComponent.handleAddRequest()"/>
</s:Group>
</s:SparkSkin>
-----------------------------------
The following Skin will not be seen by QTP - (notice that the button is outside the contentGroup in the skin.)
---------------------------------------------------------
<?xml version="1.0" encoding="utf-8"?>
<s:SparkSkin xmlns:fx="http://ns.adobe.com/mxml/2009"
xmlns:s="library://ns.adobe.com/flex/spark"
xmlns:mx="library://ns.adobe.com/flex/mx"
>
<fx:Metadata>
<![CDATA[
[HostComponent("components.MosaicTabComponent")]
]]
>
</fx:Metadata>
<s:states>
<s:State name="normal" />
<s:State name="disabled" />
</s:states>
<!-- This does not work -->
<s:HGroup right="8" top="0" height="18" verticalAlign="middle" gap="8" excludeFrom="hiddenControls">
<s:Button id="addButton"
label="AddButton"
width="100" height="30"
click="hostComponent.handleAddRequest()"/>
</s:HGroup>
<s:Group id="contentGroup" width="100%" height="100%" minWidth="0" minHeight="0">
</s:Group>
</s:SparkSkin>
--------------------------------------------
The Button in the second skin is not a content child, deliberately so. All real content children are placed into the contentGroup, per the documentation. If skins were to only contain filled rectangles, than some other construct should have been designed, not the very flexible and very useful skinning process introduced with Flex 4.
I think it is short-sighted to assume that a component's control children will be placed exclusively in the contentGroup. It must be possible to construct complex skins that contain other controls outside of the contentGroup and to be able to test them in an automated way.
Status:
CLOSED
Priority:
Major
Resolution:
Not A Problem
Affects_version:
Adobe Flex SDK Previ
Fix_version:
None
Component:
Spark Components
Label:
None
Environment:
Affected OS(s): Windows
Attachment number:
0
Assignee:
Adobe JIRA
Reporter:
Adobe JIRA
Create date:
07/Sep/10 15:48
Update date:
08/Sep/10 00:01
Resolved date:
08/Sep/10 00:01
