Summary:
CLONE -SDK 4.5.0-20967 (also 4.5.1-21328, also 4.6.0) - Style propagation using ID selector
Description:
Steps to reproduce:
1. Create three libraries and one testing project
2. Add first library to the build path of the second one (external).
3. Add second library to build path of the third one (external).
4. Add first and second library to the build path of the third one (external).
5. Add first,second and third library to the build path of the test project (RSLs).
6. In first library create two components - TestButton and TestContainer, and two skins - TestButtonSkin and TestContainerSkin
7. In second library create two components - TestButton and TestContainer extending TestButton and TestContainer from the first library. Copy TestButtonSkin and TestContainerSkin from the first library.
8. In third library create two components - TestButton and TestContainer extending TestButton and TestContainer from the second library. Copy TestButtonSkin and TestContainerSkin from the first library.
9. Create defaults.css in the first library and set the skin for the two components created, e.g.:
@namespace s "library://ns.adobe.com/flex/spark";
@namespace mx "library://ns.adobe.com/flex/mx";
@namespace library1 "http://namespace1";
library1|TestContainer
{
skinClass: ClassReference("library1.skins.TestContainerSkin");
backgroundColor: #000000;
}
library1|TestButton
{
skinClass: ClassReference("library1.skins.TestButtonSkin");
}
10. Create defaults.css in the second library and set the skin for the two components created, e.g.:
@namespace s "library://ns.adobe.com/flex/spark";
@namespace mx "library://ns.adobe.com/flex/mx";
@namespace library2 "http://namespace2";
library2|TestContainer
{
skinClass: ClassReference("library2.skins.TestContainerSkin");
backgroundColor: #cc0000;
}
library2|TestContainer #testButton
{
skinClass: ClassReference("library2.skins.TestButtonSkin");
}
10. Create defaults.css in the third library and set the skin for the two components created, e.g.:
@namespace s "library://ns.adobe.com/flex/spark";
@namespace mx "library://ns.adobe.com/flex/mx";
@namespace library3 "http://namespace3";
library3|TestContainer
{
skinClass: ClassReference("library3.skins.TestContainerSkin");
backgroundColor: #74C2E1;
}
library3|TestContainer #testButton
{
skinClass: ClassReference("library3.skins.TestButtonSkin");
}
11. Inside each TestButtonSkin put another component e.g. Label with the text="library1" , text="library2", etc.. that will help identify which skin is being used.
12. Use components from the three libraries inside the Application of the test project, e.g.:
<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009"
xmlns:s="library://ns.adobe.com/flex/spark"
xmlns:mx="library://ns.adobe.com/flex/mx" minWidth="955" minHeight="600"
xmlns:library1="http://namespace1"
xmlns:library2="http://namespace2"
xmlns:library3="http://namespace3">
<fx:Declarations>
<!-- Place non-visual elements (e.g., services, value objects) here -->
</fx:Declarations>
<s:VGroup width="100%" height="100%" verticalAlign="middle" horizontalAlign="center">
<library1:TestContainer width="600" height="100">
<s:Label text="Library1 TestContainer" color="#FFFFFF"/>
</library1:TestContainer>
<library2:TestContainer width="600" height="100">
<s:Label text="Library2 TestContainer" color="#FFFFFF"/>
</library2:TestContainer>
<library3:TestContainer width="600" height="100">
<s:Label text="Library3 TestContainer" color="#FFFFFF"/>
</library3:TestContainer>
</s:VGroup>
</s:Application>
Actual Results:
Style and skin that we defined in the defaults.css of the third library for the #testButton skinPart of the TestContainer using ID selector is not being used. We can see that the skin and style defined in the defaults.css of the second library is being used instead.
See the screenshot 1.png
Expected Results:
See the style and skin that we defined in the defaults.css of the third library for the #testButton skinPart of the TestContainer using ID selector.
See the screenshot 2.png
Workaround (if any):
Inside the skin of the TestContainer component set the skinClass of the #testButton to the skin of the #testButton (e.g. skinClass = "library3.skins.TestButtonSkin"
See the screenshot 3.png
I'm also attaching an archive with three libraries and testing project described in the bug.
Status:
OPEN
Priority:
Major
Resolution:
Unresolved
Affects_version:
Adobe Flex SDK 4.5.1
Fix_version:
None
Component:
Styles
Label:
None
Environment:
Affected OS(s): Windows
Attachment number:
0
Assignee:
Unassigned
Reporter:
Adobe JIRA
Create date:
05/Dec/11 00:10
Update date:
05/Dec/11 00:13
Resolved date:

